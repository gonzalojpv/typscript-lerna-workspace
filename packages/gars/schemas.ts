import { z } from "zod";

const LinkSchema = z.object({
  rel: z.string(),
  href: z.string().url(),
});

const EntitySchema = z.object({
  links: z.array(LinkSchema).nullable().optional(),
  id: z.string(),
  refName: z.string(),
});

const PrioritySchema = z.object({
  id: z.string(),
  refName: z.string(),
});
const TimeLogActivitiesSchema = z.object({
  links: z.array(LinkSchema),
});

export const TaskSchema = z.object({
  links: z.array(LinkSchema),
  accessLevel: z.boolean(),
  assigned: EntitySchema,
  company: EntitySchema,
  createdDate: z.string().datetime(),
  custevent_nx_address: z.string(),
  custevent_nx_billing_type: EntitySchema,
  custevent_nx_case_closed: z.boolean(),
  custevent_nx_customer: EntitySchema,
  custevent_nx_case_transaction: EntitySchema.optional(),
  custevent_nx_destroy: z.boolean(),
  custevent_nx_end_date: z.string().date(),
  custevent_nx_end_time: z.string(),
  custevent_nx_geo_location: z.string(),
  custevent_nx_geo_location_comp: z.boolean(),
  custevent_nx_latitude: z.number(),
  custevent_nx_longitude: z.number(),
  custevent_nx_recurrence_copy: z.boolean(),
  custevent_nx_recurrence_delete: z.boolean(),
  custevent_nx_recurrence_propagate: z.boolean(),
  custevent_nx_recurrence_propcomplete: z.boolean(),
  custevent_nx_start_date: z.string().date(),
  custevent_nx_start_time: z.string(),
  custevent_nx_task_asset: EntitySchema,
  custevent_nx_task_booking_confirmed: z.boolean(),
  custevent_nx_task_number: z.string(),
  custevent_nx_task_skill: TimeLogActivitiesSchema,
  custevent_nx_task_team: TimeLogActivitiesSchema,
  custevent_nx_task_type: EntitySchema,
  custevent_nx_time_log_activities: z.boolean(),
  custevent_nx_time_zone: EntitySchema,
  dueDate: z.string().date(),
  endTime: z.string(),
  id: z.string(),
  lastModifiedDate: z.string().datetime(),
  owner: EntitySchema,
  percentTimeComplete: z.number(),
  priority: PrioritySchema,
  sendEmail: z.boolean(),
  startDate: z.string().date(),
  startTime: z.string(),
  status: PrioritySchema,
  supportCase: EntitySchema,
  timedEvent: z.boolean(),
  timeRemaining: z.string(),
  timezone: z.string(),
  title: z.string(),
});

export const EmployeeSchema = z.object({
  links: z.array(LinkSchema),
  addressBook: TimeLogActivitiesSchema,
  btemplate: z.string(),
  concurrentwebservicesuser: z.boolean(),
  corporatecards: TimeLogActivitiesSchema,
  custentity_2663_payment_method: z.boolean(),
  custentity_atlas_link_hdn: EntitySchema,
  custentity_nx_labor_cost: z.number(),
  custentity_nx_mobile_user: z.boolean(),
  custentity_nx_region: EntitySchema,
  custentity_nx_skill: TimeLogActivitiesSchema,
  custentity_nxc_daily_task_proj: EntitySchema,
  custentity_nxc_requires_admin_task: z.boolean(),
  dateCreated: z.string(),
  defaultJobResourceRole: EntitySchema,
  effectivedatemode: EntitySchema,
  email: z.string(),
  empcenterqty: z.string(),
  empcenterqtymax: z.string(),
  empperms: TimeLogActivitiesSchema,
  entityId: z.string(),
  firstName: z.string(),
  fulluserqty: z.string(),
  fulluserqtymax: z.string(),
  gender: PrioritySchema,
  giveAccess: z.boolean(),
  globalSubscriptionStatus: EntitySchema,
  hireDate: z.string(),
  i9verified: z.boolean(),
  id: z.string(),
  initials: z.string(),
  isempcenterqtyenforced: z.string(),
  isfulluserqtyenforced: z.string(),
  isInactive: z.boolean(),
  isJobManager: z.boolean(),
  isJobResource: z.boolean(),
  isretailuserqtyenforced: z.string(),
  issalesrep: z.boolean(),
  issupportrep: z.boolean(),
  laborCost: z.number(),
  lastModifiedDate: z.string(),
  lastName: z.string(),
  retailuserqty: z.string(),
  retailuserqtymax: z.string(),
  roles: TimeLogActivitiesSchema,
  subsidiary: EntitySchema,
  supervisor: EntitySchema,
  targetUtilization: z.number(),
  terminationbydeath: z.boolean(),
  title: z.string(),
  wasempcenterhasaccess: z.string(),
  wasfulluserhasaccess: z.string(),
  wasinactive: z.string(),
  wasretailuserhasaccess: z.string(),
  workCalendar: EntitySchema,
});

export const CaseSchema = z.object({
  links: z.array(LinkSchema),
  assigned: EntitySchema,
  caseNumber: z.string(),
  company: EntitySchema,
  contact: EntitySchema,
  createdDate: z.string(),
  custevent_nx_assets: TimeLogActivitiesSchema,
  custevent_nx_case_asset: EntitySchema,
  custevent_nx_case_details: z.string(),
  custevent_nx_case_transaction: EntitySchema,
  custevent_nx_case_type: EntitySchema,
  custevent_nx_customer: EntitySchema,
  custevent_nx_program_update: z.boolean(),
  custevent_nx_recurrence_copy: z.boolean(),
  custevent_nx_recurrence_delete: z.boolean(),
  custevent_nx_recurrence_propagate: z.boolean(),
  custevent_nx_recurrence_propcomplete: z.boolean(),
  custevent_nx_start_date: z.string(),
  custevent_nx_start_time: z.string(),
  custevent_nx_status_update: z.boolean(),
  custevent_nx_time_zone: EntitySchema,
  custevent_nx_unbilled_expenses: z.number(),
  custevent_nx_unbilled_sales: z.number(),
  custevent_nx_unbilled_time: z.number(),
  custevent_nx_unbilled_total: z.number(),
  custevent_nx_unbilled_update: z.boolean(),
  dateCreated: z.string(),
  email: z.string(),
  endDate: z.string(),
  escalateHist: TimeLogActivitiesSchema,
  escalateTo: TimeLogActivitiesSchema,
  eventNumber: z.number(),
  firstUpdated: z.string(),
  id: z.string(),
  isInactive: z.boolean(),
  issues: TimeLogActivitiesSchema,
  lastModifiedDate: z.string(),
  origCaseNumber: z.string(),
  phone: z.string(),
  priority: EntitySchema,
  profile: EntitySchema,
  spamLock: z.string(),
  stage: z.string(),
  startDate: z.string(),
  startTime: z.string(),
  status: EntitySchema,
  subsidiary: EntitySchema,
  title: z.string(),
  version: z.string(),
});

export const WorkSummaryNetSuiteSchema = z.object({
  custrecord_xoi_ws_task: z.string({
    required_error: "custrecord_xoi_ws_task is required",
    invalid_type_error: "custrecord_xoi_ws_task must be a string",
  }),
  custrecord_xoi_ws_ai_summary: z.string({
    required_error: "custrecord_xoi_ws_ai_summary is required",
    invalid_type_error: "custrecord_xoi_ws_ai_summary must be a string",
  }),
  custrecord_xoi_ws_wf_name: z.string({
    required_error: "custrecord_xoi_ws_wf_name is required",
    invalid_type_error: "custrecord_xoi_ws_wf_name must be a string",
  }),
  custrecord_xoi_ws_dg: z.string().optional(),
});

export const WebhookSchema = z.object({
  links: z.array(LinkSchema),
  custrecord_mhi_xoi_endpoint: z.string().url(),
  id: z.string(),
  isInactive: z.boolean(),
  name: z.string(),
  owner: EntitySchema,
  scriptId: z.string(),
});
